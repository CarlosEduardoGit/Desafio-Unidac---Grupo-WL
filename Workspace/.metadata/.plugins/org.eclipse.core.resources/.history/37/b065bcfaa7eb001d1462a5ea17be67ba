package com.app.breakfast.controllers;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.breakfast.dtos.CheckListDto;
import com.app.breakfast.dtos.CheckListDto.CheckListView;
import com.app.breakfast.enums.CollaboratorStatus;
import com.app.breakfast.models.CheckListModel;
import com.app.breakfast.services.CheckListService;
import com.fasterxml.jackson.annotation.JsonView;

@RestController
@CrossOrigin(origins = "*",maxAge = 3600)
@RequestMapping("/checklists")
public class CheckListController {

	@Autowired
	CheckListService checkListService;
	
	@PostMapping("/register")
    public ResponseEntity<Object> registerCheckList(@RequestBody 
    												@JsonView(CheckListDto.CheckListView.RegistrationPost.class)CheckListDto checkListDto){
        
	   if(checkListService.existsByCollaboratorName(checkListDto.getCollaboratorName())){
	       return ResponseEntity.status(HttpStatus.CONFLICT).body("Error: Collaborator Name is already exists!");
	   }
	   
	   if(checkListService.existsByCpf(checkListDto.getCpf())){
	       return ResponseEntity.status(HttpStatus.CONFLICT).body("Error: CPF is already exists!");
	   }
	   
	   if(checkListService.existsByContribution(checkListDto.getContribution())){
	       return ResponseEntity.status(HttpStatus.CONFLICT).body("Error: Contribution is already exists!");
	   }
		
	   var checkListModel = new CheckListModel();
       BeanUtils.copyProperties(checkListDto, checkListModel);
       //checkListModel.setCollaboratorStatus(CollaboratorStatus.ACTIVE);       
       //checkListModel.setDateOfRealization(checkListModel.getDateOfRealization());
       checkListService.save(checkListModel);
       return ResponseEntity.status(HttpStatus.CREATED).body(checkListModel);

    }
	
	@GetMapping
    public ResponseEntity<List<CheckListModel>> getAllCheckLists(){
        
        return ResponseEntity.status(HttpStatus.OK).body(checkListService.findAll());
    }
	
	@GetMapping("/{checkListId}")
    public ResponseEntity<Object> getOneCheckList(@PathVariable(value = "checkListId") UUID checkListId){
		
		Optional<CheckListModel> checkListModelOptional = checkListService.findById(checkListId);
		
		if(!checkListModelOptional.isPresent()){
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("This record does not exist in the list.");
        } else{
            return ResponseEntity.status(HttpStatus.OK).body(checkListModelOptional.get());
        }
        
    }
	
	/*
	@GetMapping("/{checkListId}")
    public ResponseEntity<Object> getOneCheckList(@PathVariable(value = "checkListId") UUID checkListId){
		
		Optional<CheckListModel> checkListModelOptional = checkListService.findById(checkListId);
		
		if(!checkListModelOptional.isPresent()){
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("This record does not exist in the list.");
        } else{
            return ResponseEntity.status(HttpStatus.OK).body(checkListModelOptional.get());
        }
        
    } 
	*/
	
	@DeleteMapping("/{checkListId}")
    public ResponseEntity<Object> deleteCheckList(@PathVariable(value = "checkListId") UUID checkListId){
        
        Optional<CheckListModel> checkListModelOptional = checkListService.findById(checkListId);
        
        if(!checkListModelOptional.isPresent()){
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("This record does not exist in the list.");
        } else{
        	checkListService.delete(checkListModelOptional.get());
            return ResponseEntity.status(HttpStatus.OK).body("Record deleted successfully");
        }
    }
	
	@PutMapping("/{checkListId}")
    public ResponseEntity<Object> updateCheckList(@PathVariable(value = "checkListId") UUID checkListId, 
    											  @JsonView(CheckListDto.CheckListView.CheckListPut.class) CheckListDto checkListDto){
		
		Optional<CheckListModel> checkListModelOptional = checkListService.findById(checkListId);
        
        if(!checkListModelOptional.isPresent()){
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("This record does not exist in the list.");
        } else{
        	var checkListModel = checkListModelOptional.get();
        	checkListModel.setCollaboratorName(checkListDto.getCollaboratorName());
        	checkListModel.setCpf(checkListDto.getCpf());
        	checkListModel.setContribution(checkListDto.getContribution());
        	checkListService.save(checkListModel);
        	
        	return ResponseEntity.status(HttpStatus.OK).body(checkListModel);
        }
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}
